name: Pubby.co Login, Browse & Pick Free Book Automation

on:
  schedule:
    - cron: '*/10 * * * *'  # Run every 10 minutes
  workflow_dispatch:

jobs:
  login-pubby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs

      - name: Create Puppeteer script for Login, Browse & Pick Free Book
        run: |
          mkdir -p scripts screenshots
          cat > scripts/pubby-login-and-browse.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          
          puppeteer.use(StealthPlugin());
          
          // Helper sleep function.
          function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }
          
          // Helper function to safely take a screenshot.
          async function safeScreenshot(page, path) {
            try {
              await page.screenshot({ path });
              console.log(`Screenshot taken: ${path}`);
            } catch (err) {
              console.error(`Failed to take screenshot ${path}: ${err.message}`);
            }
          }
          
          async function loginAndBrowse(loginUrl, browseUrl, username, password) {
            console.log("Launching browser...");
            const browser = await puppeteer.launch({
              headless: "new",
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox'
              ]
            });
            const page = await browser.newPage();
          
            // Stage 1: Navigate to the login page.
            console.log("Navigating to login page:", loginUrl);
            await page.goto(loginUrl, { waitUntil: 'networkidle2', timeout: 60000 });
            await safeScreenshot(page, `./screenshots/pubby_home_${Date.now()}.png`);
          
            // Stage 2: Fill in the login form.
            console.log("Filling in login credentials...");
            await page.type('input[name="email"]', username, { delay: 100 });
            await page.type('input[name="password"]', password, { delay: 100 });
            await safeScreenshot(page, `./screenshots/pubby_credentials_filled_${Date.now()}.png`);
          
            // Stage 3: Submit the login form.
            console.log("Clicking the login button...");
            await Promise.all([
              page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 }),
              page.click('button[type="submit"]')
            ]);
            await safeScreenshot(page, `./screenshots/pubby_after_login_${Date.now()}.png`);
          
            // Stage 4: Verify login status.
            console.log("Verifying login status...");
            const dashboard = await page.$('a.logout, .dashboard');
            if (dashboard) {
              console.log("Login successful.");
            } else {
              console.warn("Login may have failed. Dashboard element not found.");
              await safeScreenshot(page, `./screenshots/pubby_login_failed_${Date.now()}.png`);
            }
          
            // Stage 5: Navigate to the browse page.
            console.log("Navigating to browse page:", browseUrl);
            await page.goto(browseUrl, { waitUntil: 'networkidle2', timeout: 60000 });
            await safeScreenshot(page, `./screenshots/pubby_browse_${Date.now()}.png`);
          
            // Extra wait to ensure dynamic content loads
            console.log("Waiting for dynamic content to load...");
            await sleep(3000);
          
            // Stage 6: Extract Recommended Books.
            console.log("Extracting Recommended Books...");
            const recommendedBooks = await page.evaluate(() => {
              const books = [];
              document.querySelectorAll('.pages-container .page-label').forEach(label => {
                const titleElement = label.querySelector('.page-label-text span') || label.querySelector('.page-label-text');
                if (titleElement && titleElement.innerText.trim().length > 0) {
                  books.push(titleElement.innerText.trim());
                }
              });
              return books;
            });
            console.log("Recommended Books:", recommendedBooks);
            await safeScreenshot(page, `./screenshots/pubby_books_extracted_${Date.now()}.png`);
          
            // Stage 7: Extract Activity Timeline.
            console.log("Extracting Activity Timeline...");
            const activityTimeline = await page.evaluate(() => {
              const events = [];
              document.querySelectorAll('.timeline .event').forEach(event => {
                const contentEl = event.querySelector('.content');
                const timeEl = event.querySelector('.time');
                events.push({
                  content: contentEl ? contentEl.innerText.trim() : '',
                  time: timeEl ? timeEl.innerText.trim() : ''
                });
              });
              return events;
            });
            console.log("Activity Timeline:", activityTimeline);
            await safeScreenshot(page, `./screenshots/pubby_activity_extracted_${Date.now()}.png`);
          
            // Stage 8: Find a free book card, click it, then click "Pick Book".
            console.log("Scanning for free book cards...");
            const freeCardElements = await page.$x("//div[contains(@class, 'card') and .//div[contains(@class, 'free')] and contains(., 'Free Download')]");
            if (freeCardElements.length > 0) {
              console.log("Free book card found. Clicking the card...");
              await freeCardElements[0].click();
              await sleep(2000); // Wait for card details to load.
              await safeScreenshot(page, `./screenshots/pubby_free_card_clicked_${Date.now()}.png`);
          
              console.log("Looking for 'Pick Book' button...");
              const pickBookButtons = await page.$x("//div[contains(@class, 'action') and contains(@class, 'action-blue') and normalize-space(text())='Pick Book']");
              if (pickBookButtons.length > 0) {
                console.log("'Pick Book' button found. Clicking...");
                await pickBookButtons[0].click();
                await sleep(2000);
                await safeScreenshot(page, `./screenshots/pubby_pick_book_clicked_${Date.now()}.png`);
              } else {
                console.log("'Pick Book' button not found after clicking the free book card.");
              }
            } else {
              console.log("No free book card found.");
            }
          
            // Stage 9: Save final HTML of the browse page.
            console.log("Saving final HTML of the browse page...");
            const finalHtml = await page.content();
            const htmlFile = `./screenshots/pubby_final_page_${Date.now()}.html`;
            fs.writeFileSync(htmlFile, finalHtml);
            console.log(`Final HTML saved: ${htmlFile}`);
          
            await browser.close();
          }
          
          async function run() {
            const loginUrl = process.env.PUBBY_LOGIN_URL || "https://account.pubby.co/login";
            const browseUrl = process.env.PUBBY_BROWSE_URL || "https://app.pubby.co/#/browse";
            const username = process.env.PUBBY_USERNAME;
            const password = process.env.PUBBY_PASSWORD;
          
            if (!username || !password) {
              console.error("Username and password must be provided via environment variables.");
              process.exit(1);
            }
            await loginAndBrowse(loginUrl, browseUrl, username, password);
          }
          
          run().catch(error => {
            console.error("Script failed:", error.message);
            process.exit(1);
          });
          EOL

      - name: Run Puppeteer script
        env:
          PUBBY_LOGIN_URL: "https://account.pubby.co/login"
          PUBBY_BROWSE_URL: "https://app.pubby.co/#/browse"
          PUBBY_USERNAME: ${{ secrets.PUBBY_USERNAME }}
          PUBBY_PASSWORD: ${{ secrets.PUBBY_PASSWORD }}
        run: |
          echo "Logging in to: $PUBBY_LOGIN_URL and navigating to: $PUBBY_BROWSE_URL"
          node scripts/pubby-login-and-browse.js | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pubby-debug-artifacts
          path: |
            screenshots/
            *.log
          retention-days: 7
